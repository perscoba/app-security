name: Example workflow for app security SAST, SCA, IAST, DAST

on: [push, pull_request]

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  docker-build-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push images
        run: |
          services="assets cart catalog checkout orders ui"
          for service in $services; do
            path="./src/$service"
            if [ -d "$path" ]; then
              image="perscoba/appsec-revive-${service}:latest"
              echo "🔧 Building $service at $path"
              docker build -t "$image" "$path"
              echo "🚀 Pushing $image"
              docker push "$image"
            else
              echo "⚠️ Skipping $service – directory $path not found"
            fi
          done

  snyk-scan:
    runs-on: ubuntu-latest
    needs: docker-build-push

    strategy:
      matrix:
        service: [assets, cart, catalog, checkout, orders, ui]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Test on ${{ matrix.service }}
        run: snyk test ./src/${{ matrix.service }} --sarif-file-output=snyk-${{ matrix.service }}.sarif || true

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-${{ matrix.service }}.sarif

  dast-scan-hawk:
    runs-on: ubuntu-latest
    needs: docker-build-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker Compose environment
        run: docker compose up -d --build

      - name: Wait for the app to be ready
        run: |
          echo "Waiting for http://localhost:9090 to be ready..."
          for i in {1..30}; do
            if curl -sSf http://localhost:9090 > /dev/null; then
              echo "✅ App is ready!"
              break
            else
              echo "⏳ Still waiting... ($i)"
              sleep 5
            fi
          done

      - name: Run StackHawk DAST Scan
        uses: stackhawk/hawkscan-action@v2
        with:
          apiKey: ${{ secrets.HAWK_API_KEY }}

  secrets-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install TruffleHog
        run: pip install truffleHog

      - name: Run TruffleHog Scan
        run: trufflehog filesystem --json . > trufflehog-results.json || true

      - name: Upload TruffleHog results
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: trufflehog-results.json

      - name: Install Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
          chmod +x gitleaks
          mv gitleaks /usr/local/bin/

      - name: Run Gitleaks Scan
        run: gitleaks detect --report-format json --report-path=gitleaks-results.json || true

      - name: Upload Gitleaks results
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: gitleaks-results.json
